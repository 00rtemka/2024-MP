import numpy as np
ints=[]
for i in range(20):
    ints.append(np.random.randint(0,99999))
print(ints)

#floats=[np.random.random(99999)]
floats=[]
for i in range(99999):
    el=float(np.random.random(1))
    floats.append(el)
    #floats.append(np.random.random(1))
print(floats[0:10])

complexes=[]
for i in range(42000):
    x = np.random.randint(0, 1000)
    y = np.random.randint(0, 1000)
    complexes.append(complex(x, y))
print(complexes[0:10])

import string 
text=[]

with open("book.txt", encoding="utf-8") as f:
    for line in f:
        text += line.translate(str.maketrans(dict.fromkeys(string.punctuation))).split()
f.close()
print(text) #до 35 страницы "Женщина с утюжным кулаком"

#сравнение строк
def less_str(word1,word2):
    for c1,c2 in zip(word1,word2):
        if ord(c1)<ord(c2): return True
        else: return False
def greater_str(word1,word2):
    for c1,c2 in zip(word1,word2):
        if ord(c1)>ord(c2): return True
        else: return False
def eq_str(word1,word2):
    for c1,c2 in zip(word1,word2):
        if ord(c1)==ord(c2): return True
        else: return False


#сортировка вставкой

def insertion_sort(list1):
    alist=list1.copy()
    for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp
    return alist
#sorted_ints=insertion_sort(ints)
#print(ints,'\n')
#print(sorted_ints)

#блочная сортировка
from math import floor
def bucket_sort(list1):
    alist=list1.copy()
    optimal_segment_size=max(alist)/len(alist)
    blocks=[]
    for i in range(len(alist)):
        segment=[]
        blocks.append(segment)
    for i in alist:
        index=int(i//optimal_segment_size)
        if index>=len(alist): index=int(i//optimal_segment_size)-1
        blocks[index].append(i)
    i=0
    res=[]
    for b in blocks:
        #print(len(b))
        if len(b)!=0:
            b=insertion_sort(b)
            for el in b:
                #print(el)
                res.append(float(el))
    return res
example=floats[0:20]
print(example,'\n')
sorted_floats=bucket_sort(example)
print(bucket_sort(example))
        
